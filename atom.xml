<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>生如夏花</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lutianqi-java.github.io/"/>
  <updated>2020-04-20T13:44:32.871Z</updated>
  <id>https://lutianqi-java.github.io/</id>
  
  <author>
    <name>呼啦啦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>策略模式</title>
    <link href="https://lutianqi-java.github.io/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lutianqi-java.github.io/2020/04/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-04-19T10:40:50.000Z</published>
    <updated>2020-04-20T13:44:32.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>  官方描述（定义一系列算法，把他们封装起来，并且使它们可以相互替换）<br>  白话文描述：有共同的抽象行为，具体不同的行为称作为不同的策略，最终可以使用Context上下文获取对应策略。<br>  应用场景:解决多重if判断问题、聚合支付平台、第三方联合登陆、调用多个不同短信接口等。<br> <a id="more"></a></p><h3 id="1、需要执行的方法抽象行为"><a href="#1、需要执行的方法抽象行为" class="headerlink" title="1、需要执行的方法抽象行为"></a>1、需要执行的方法抽象行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.strategyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、通过枚举类定义策略和具体实现类的关系"><a href="#2、通过枚举类定义策略和具体实现类的关系" class="headerlink" title="2、通过枚举类定义策略和具体实现类的关系"></a>2、通过枚举类定义策略和具体实现类的关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.strategyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DesignEnum &#123;</span><br><span class="line"></span><br><span class="line">    EAT(<span class="string">"eat"</span>, <span class="string">"eatStrategy"</span>),</span><br><span class="line">    SELLP(<span class="string">"sleep"</span>, <span class="string">"sleepStrategy"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String doCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    DesignEnum(String doCode, String beanName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.doCode = doCode;</span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getBeanName</span><span class="params">(String doCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (DesignEnum designEnum : DesignEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (designEnum.doCode.equals(doCode)) &#123;</span><br><span class="line">                <span class="keyword">return</span> designEnum.beanName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、吃的实现类"><a href="#3、吃的实现类" class="headerlink" title="3、吃的实现类"></a>3、吃的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.strategyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatStrategy</span> <span class="keyword">implements</span> <span class="title">DemoStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、睡的实现类"><a href="#4、睡的实现类" class="headerlink" title="4、睡的实现类"></a>4、睡的实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.strategyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepStrategy</span> <span class="keyword">implements</span> <span class="title">DemoStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、SpringUtils-根据beanName获取bean"><a href="#5、SpringUtils-根据beanName获取bean" class="headerlink" title="5、SpringUtils 根据beanName获取bean"></a>5、SpringUtils 根据beanName获取bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取 Bean.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、测试，接口传递doCode-eat或sleep-会分别走不同的方法"><a href="#6、测试，接口传递doCode-eat或sleep-会分别走不同的方法" class="headerlink" title="6、测试，接口传递doCode (eat或sleep) 会分别走不同的方法"></a>6、测试，接口传递doCode (eat或sleep) 会分别走不同的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.design.strategyDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.design.utils.SpringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/strategy"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String doCode)</span> </span>&#123;</span><br><span class="line">        String beanName = DesignEnum.getBeanName(doCode);</span><br><span class="line">        DemoStrategy demoStrategy = (DemoStrategy) SpringUtils.getBean(beanName);</span><br><span class="line">        demoStrategy.doSomething();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"执行成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h3&gt;&lt;p&gt;  官方描述（定义一系列算法，把他们封装起来，并且使它们可以相互替换）&lt;br&gt;  白话文描述：有共同的抽象行为，具体不同的行为称作为不同的策略，最终可以使用Context上下文获取对应策略。&lt;br&gt;  应用场景:解决多重if判断问题、聚合支付平台、第三方联合登陆、调用多个不同短信接口等。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://lutianqi-java.github.io/categories/Java/"/>
    
    
      <category term="设计模式" scheme="https://lutianqi-java.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="https://lutianqi-java.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lutianqi-java.github.io/2020/04/19/hello-world/"/>
    <id>https://lutianqi-java.github.io/2020/04/19/hello-world/</id>
    <published>2020-04-19T08:45:32.477Z</published>
    <updated>2020-04-19T10:36:08.370Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>访问地址:<a href="https://lutianqi-java.github.io/" title="vist url">https://lutianqi-java.github.io/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker修镜像仓库为阿里镜像</title>
    <link href="https://lutianqi-java.github.io/2019/01/08/docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F/"/>
    <id>https://lutianqi-java.github.io/2019/01/08/docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F/</id>
    <published>2019-01-08T12:59:00.000Z</published>
    <updated>2020-04-19T15:42:51.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker修镜像仓库为阿里镜像仓库为阿里镜像"><a href="#docker修镜像仓库为阿里镜像仓库为阿里镜像" class="headerlink" title="docker修镜像仓库为阿里镜像仓库为阿里镜像"></a>docker修镜像仓库为阿里镜像仓库为阿里镜像</h3><h3 id="1-配置镜像加速器"><a href="#1-配置镜像加速器" class="headerlink" title="1. 配置镜像加速器"></a>1. 配置镜像加速器</h3><pre><code>配置镜像加速器针对Docker客户端版本大于 1.10.0 的用户您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</code></pre> <a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31246600&auto=1&height=66"></iframe><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">"registry-mirrors": ["https://o4habk6k.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;docker修镜像仓库为阿里镜像仓库为阿里镜像&quot;&gt;&lt;a href=&quot;#docker修镜像仓库为阿里镜像仓库为阿里镜像&quot; class=&quot;headerlink&quot; title=&quot;docker修镜像仓库为阿里镜像仓库为阿里镜像&quot;&gt;&lt;/a&gt;docker修镜像仓库为阿里镜像仓库为阿里镜像&lt;/h3&gt;&lt;h3 id=&quot;1-配置镜像加速器&quot;&gt;&lt;a href=&quot;#1-配置镜像加速器&quot; class=&quot;headerlink&quot; title=&quot;1. 配置镜像加速器&quot;&gt;&lt;/a&gt;1. 配置镜像加速器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;配置镜像加速器针对Docker客户端版本大于 1.10.0 的用户您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://lutianqi-java.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker安装</title>
    <link href="https://lutianqi-java.github.io/2019/01/08/docker%E5%AE%89%E8%A3%85/"/>
    <id>https://lutianqi-java.github.io/2019/01/08/docker%E5%AE%89%E8%A3%85/</id>
    <published>2019-01-08T12:42:50.000Z</published>
    <updated>2020-04-19T15:42:44.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-要求-CentOS-系统的内核版本高于-3-10-，查看本页面的前提条件来验证你的CentOS-版本是否支持-Docker-。"><a href="#Docker-要求-CentOS-系统的内核版本高于-3-10-，查看本页面的前提条件来验证你的CentOS-版本是否支持-Docker-。" class="headerlink" title="Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。"></a>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</h3> <a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31246600&auto=1&height=66"></iframe>### 1、安装一些必要的系统工具<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>### 2、添加软件源信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>### 3、更新 yum 缓存<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>### 4、安装 Docker-ce<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure>### 5、启动 Docker 后台服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>### 6、测试运行 hello-world<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker-要求-CentOS-系统的内核版本高于-3-10-，查看本页面的前提条件来验证你的CentOS-版本是否支持-Docker-。&quot;&gt;&lt;a href=&quot;#Docker-要求-CentOS-系统的内核版本高于-3-10-，查看本页面的前提条件来验证你的CentOS-版本是否支持-Docker-。&quot; class=&quot;headerlink&quot; title=&quot;Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。&quot;&gt;&lt;/a&gt;Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://lutianqi-java.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
